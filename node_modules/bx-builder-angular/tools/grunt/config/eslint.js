/**
 * Created by sgjeon on 16. 4. 8..
 */

const _ = require('lodash');
const path = require('path');

const esLintPluginBxUipAngular = require('eslint-plugin-bxuipAngular');

const plugins = esLintPluginBxUipAngular.configs.bxuipAngular.plugins;
const bxuipRules = esLintPluginBxUipAngular.configs.bxuipAngular.rules;

const taskName = 'eslint';

module.exports = function(grunt, options){

	const config = grunt.config.get('config');

    // https://github.com/sindresorhus/grunt-eslint
    var esLint = {
		options: {
			//rulePaths: ['conf/rules'],
            parserOptions: {
                ecmaVersion: 6,
                sourceType: 'module',
                ecmaFeatures: {
                    "jsx": true
                }
            },
			useEslintrc: true,
			plugins: plugins,
			// rules 프로퍼티에 아무런 rule 값이 등록되지 않았을경우, rule 설정이 존재하지않는다는 오류가 발생한다.
			// 이에 반드시 기본 룰 값을 지정해야한다.
			rules: bxuipRules
		},
		target: []
    };

    (function initEsLint(){

        var rules = {};
        var buildObject = config.build;

        if (
        !buildObject.linters ||
        !buildObject.linters.js ||
        !buildObject.linters.js.rules ||
        !_.size(buildObject.linters.js.rules)) return;

        var configRules = buildObject.linters.js.rules;

        if (!_.isString(configRules) && !_.isPlainObject(configRules)) return;

        if (_.isString(configRules)){

            if (configRules !== '*'){
                grunt.fail.fatal('[' + taskName + '] Please defined the wildCard character.');
            }

            _.map(bxuipRules, function(v, k){
                rules[k] = 'error';
            });
        }
        else if (_.isPlainObject(configRules)){

            _.map(bxuipRules, function(v, k){

                rules[k] = 'off';

                if (configRules[k] === 'error'){
                    rules[k] = configRules[k];
                }
            });
        }

        const ext = '.js';
        const defaultSrc = `**/*${ext}`;
        const src = _.isArray(buildObject.linters.js.src) ? buildObject.linters.js.src : [defaultSrc];

        const replacePtn = /\..+$/gi;

        const _src = [];

        _.forEach(src, v => {

            v = v.replace(replacePtn, '');

            _src.push(path.join(config.tools.path.app, (v + ext)));

        });

        esLint.target = _src;
        esLint.options.rules = rules;

    })();

    return esLint;
};