/**
 * Created by sgjeon on 16. 4. 8..
 */

// lodash
const _ = require('lodash');

module.exports = function(grunt, options){

    // https://github.com/gruntjs/grunt-contrib-watch
    grunt.loadNpmTasks('grunt-contrib-watch');

    const config = grunt.config.get('config');

    const linters = config.build.linters;
    const enabledESLint = _.isPlainObject(linters) && _.isPlainObject(linters.js) && linters.js.rules;

    // 각 TASK 에서 공통으로 사용되는 옵션
    const commonOpts = {
        "spawn": false,
        "interrupt": true,
        // CPU 사용량 증가 이슈로 인한, 설정(interval 값을 증가시킨다)

        // 공식 페이지의 Readme.md 파일에 `Why is the watch devouring all my memory/cpu?` 라는 제목으로 해당 문제에 대한 공식적인 언급이 있음.
        // 이로인해, interval 값을 3000 으로 조정한다.
        // https://github.com/gruntjs/grunt-contrib-watch/issues/145
        "interval": 3000
    };

    const watch = {
        style: {
            options: {
                cwd: '<%=config.tools.path.src%>'
            },
            files: [
                '**/*.css',
                '**/*.scss'
            ],
            tasks: []
        },
        js: {
            options: {
                cwd: '<%=config.tools.path.src%>'
            },
            files: [
                '**/*.js'
            ],
            tasks: []
        },
        tplHtml: {
            options: {
                cwd: '<%=config.tools.path.app%>',
                spawn: false
            },
            files: [
                '**/*.tpl.html'
            ],
            tasks: []
        },
        copy: {
            options: {},
            files: [],
            tasks: []
        },
        index: {
            options: {
                cwd: '<%=config.tools.path.src%>'
            },
            files: [
                'index.html'
            ],
            tasks: []
        },
        config: {
            options: {
                cwd: '<%=config.tools.path.root%>'
            },
            files: [
                'Gruntfile.js',
                'build.config.js'
            ],
            tasks:[]
        }
    };

    (function initWatch(){

        const doneTask = '_done:dev';
        const copyMain = 'copy:main';

        const styleTasks = [
            // csslinting 을 진행한다.
            'csslint_plus',
            // 모든 css 파일 삭제
            '_clean:css',
            // sass 빌드
            'sass:dev',
            // 최종 task 진행
            doneTask
        ];

        const jsTasks = [
            // js 파일을 삭제한다.
            '_clean:js',
            // webpack 빌드
            'shell:webpack',
            // js concat
            'concat:dev',
            // 최종 task 진행
            doneTask
        ];

        // eslint 설정이 활성화되어있는 경우
        if (enabledESLint){
            // js linting 을 진행한다.
            jsTasks.unshift('eslint');
        }

        // tplHtml task 집합
        const tplHtmlTasks = [
            // html hinting 을 진행한다.
            'htmlhintplus',
            // tpl 파일 삭제
            '_clean:templateHtml',
            // tpl 파일 복사
            'copy:tplHtml',
            // 최종 task 진행
            doneTask
        ];

        const copyTasks = [copyMain, doneTask];

        const indexTask = ['_done:watch'];

        const configTask = [
            // index.html을 제외한 모든 파일 삭제한다.
            '_clean:excludeIndexHtml',
            // webpack 빌드(app.js 파일 생성)
            'shell:webpack',
            // // external 파일 생성
            'concat:dev',
            // sass 빌드
            'sass:dev',
            // `src/app/**/*.tpl.html` 파일들을 `build` 폴더 하위로 복사
            'copy:tplHtml',
            // 정적 리소스를 복사
            'copy:main',
            // 최종 task 진행
            doneTask
        ];

        //copy 관련 src 목록을 가져온다.
        const copyFiles = [];

        _.forEach(config.build.copy.files, function(file){

            const src = file.src;
            const cwd = file.cwd;

            _.forEach(src, v => {
                copyFiles.push(cwd + '/' + v);
            });
        });

        watch.style.tasks = styleTasks;
        watch.js.tasks = jsTasks;
        watch.tplHtml.tasks = tplHtmlTasks;

        watch.copy.tasks = copyTasks;
        watch.copy.files = copyFiles;

        watch.index.tasks = indexTask;

        watch.config.tasks = configTask;

        // 공통 옵션을 설정한다.
        _.map(watch, v => {
            _.assign(v.options, commonOpts);
        });

    })();

    return watch;
};