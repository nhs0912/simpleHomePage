const glob = require('glob');
const _ = require('lodash');
const fs = require('fs');
const path = require('path');
const util = require("../../lib/util");
const webpackUtil = require('../../lib/webpackUtil');

module.exports = function(grunt, options){

    const config = grunt.config.get('config');

    grunt.loadNpmTasks('grunt-html-build');

    // https://github.com/spatools/grunt-html-build
    const htmlBuild = {

        main: {
            src: '<%=config.build.html.template%>',
            dest: path.join(config.tools.path.build, 'index.html'),
            options: {
                beautify: true,
                prefix: '',
                relative: true,
                scripts: {
                    // 아래 설정 부분은 initScript() 함수를 참고.
                    app: [],
                    pre: [],
                    post: []
                },
                styles: {
                    css: []
                },
                sections: {
                },
                data: {
                    buildDateTime: new Date().getTime(),
                    title: '<%=config.build.html.title%>',
                    remote_style: '',
                    remote_script_pre: '',
                    remote_script_post: ''
                }
            }
        }
    };

    (function initHtmlBuild(){

        (function initScript(){

            (function() {

                // root 폴더 하위의 js 파일들
                var jsRootEntry = glob.sync(`${config.tools.path.build}/*.js`);
                // common 폴더 하위를 제외한 모든 js 파일들
                var jsEntry = glob.sync(`${config.tools.path.build}/!(common)/**/*.js`);

                jsEntry = jsRootEntry.concat(jsEntry);

                const jsCopyFileEntry = util.filterCopyFiles(config.build.copy.files, 'js');
                const excludedJSFilePaths = util.excludeFilePaths(jsEntry, jsCopyFileEntry);

                const commonBundleName = webpackUtil.getChunkName();

                excludedJSFilePaths.map((filePath) => {

                    if (filePath.indexOf(commonBundleName) > -1) {
                        htmlBuild.main.options.scripts.app.splice(0, 0, filePath);
                        return;
                    }
                    htmlBuild.main.options.scripts.app.push(filePath)
                });

            })();

            (function(){

                const jsArray = glob.sync(`${config.tools.path.build}/common/**/*.js`);

                jsArray.map((filePath)=>{

                    if (filePath.indexOf('external.pre') > -1) {
                        console.log(filePath);
                        htmlBuild.main.options.scripts.pre.push(filePath);
                        return;
                    }

                    htmlBuild.main.options.scripts.post.push(filePath);
                });

            })();

        })();


        (function styleCss(){

            // assets 폴더 하위의 모든 css 파일들을 가져온다.
            var builtInFilePaths = glob.sync(`${config.tools.path.build}/${config.tools.relativePath.assets}/**/*.css`);

            var targetBuildFilePaths = [];

            _.forEach(builtInFilePaths, v => {

                v = path.join(v);

                // 빌드가 완료된 파일 목록을 생성한다.
                targetBuildFilePaths.push(v);
            });

            // css.files 프로퍼티에 정의한 css 순서와 index.html 에 할당되는 css 순서를 동일하게 맞춰 로드 순서를 보장시켜준다.
            var styles = [];
            var css = config.build['css'];

            // build.config의 js -> external 과 동일한 이름을 맞추기 위해
            // css -> files 를 css -> external 으로 변경 하였다
            // 기존 사용자를 위해 files 남겨두었다

            var files = css['files'] || css['external'];

            if (_.isPlainObject(css) && _.isPlainObject(files)){

                _.map(files, v => {

                    // css 내부 파일 목록을 빌드된 파일 경로로 치환한다.
                    v = util.replaceCSSPathToBuildAssetsPath(v);
                    v = util.replaceSassToCss(v);

                    // 치환된 css 내부 파일 목록이, 빌드된 파일 목록에 있을 경우
                    if (targetBuildFilePaths.indexOf(v) > -1){
                        styles.push(v);
                    }
                });
            }

            htmlBuild.main.options.styles.css = styles;

        })();


        // add remote style file
        (function remoteStyle(){

            var styles = [];
            var suffix = '_style';

            var css = config.build['css'];

            if (css && css['remote']){

                var remote = css['remote'];

                for (var name in remote){

                    var file = remote[name];

                    if (file && file.src){
                        styles.push('<link id="' + name + suffix + '" rel="stylesheet" href="' + file.src + '" />');
                    }
                }

                htmlBuild.main.options.data.remote_style = styles.join('');
            }

        })();


        // add remote pre script file
        (function remoteScriptPre(){

            var scripts = [];
            var suffix = '_script_pre';

            var js = config.build['js'];

            if (js && js['remote'] && js['remote']['pre']){

                var pre = js['remote']['pre'];

                for (var name in pre){

                    var file = pre[name];

                    if (file && file.src){
                        scripts.push('<script id="' + name + suffix + '" type="text/javascript" src="' + file.src + '"></script>');
                    }
                }

                htmlBuild.main.options.data.remote_script_pre = scripts.join('');
            }

        })();

        // add remote post script file
        (function remoteScriptPost(){

            var scripts = [];
            var suffix = '_script_post';

            var js = config.build['js'];

            if (js && js['remote'] && js['remote']['post']){

                var post = js['remote']['post'];

                for (var name in post){

                    var file = post[name];

                    if (file && file.src){
                        scripts.push('<script id="' + name + suffix + '" type="text/javascript" src="' + file.src + '"></script>');
                    }
                }

                htmlBuild.main.options.data.remote_script_post = scripts.join('');
            }

        })();

    })();

    return htmlBuild;
};
