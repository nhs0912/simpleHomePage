const _ = require('lodash');
const glob = require('glob');
const util = require('../../lib/util');

module.exports = function(grunt, subTaskName){

    const config = grunt.config.get('config');

    const clean = {
        // 빌드 폴더 삭제
        main:['<%=config.tools.path.build%>'],
        // index.html 을 제외한 파일 삭제
        excludeIndexHtml:['<%=config.tools.path.build%>/**/!(index.html)'],
        // js 파일 삭제
        js:[],
        // css 파일 삭제
        css: [],
        // template html 파일 삭제
        templateHtml: ['<%=config.tools.path.build%>/**/*.tpl.html'],
        // templateCache 처리를 위한, 임시 파일 삭제
        templates: ['<%=config.tools.path.build%>/templates.js']
    };

    return function initClean(){

        // 전체 js 목록
        var jsEntry = [];
        // 전체 css 목록
        var cssEntry = [];

        // 제외될 js 파일 목록
        var jsCopyFileEntry = [];
        // 제외될 css 파일 목록
        var cssCopyFileEntry = [];

        // 제외된 js 파일 목록
        var excludedJSFilePaths = [];
        // 제외될 css 파일 목록
        var excludedCSSFilePaths = [];

        if (subTaskName === 'js'){

            jsEntry = glob.sync(`${config.tools.path.build}/**/*.js`);
            jsCopyFileEntry = util.filterCopyFiles(config.build.copy.files, 'js');

            excludedJSFilePaths = util.excludeFilePaths(jsEntry, jsCopyFileEntry);

            clean.js = excludedJSFilePaths;
        }
        else if (subTaskName === 'css'){

            cssEntry = glob.sync(`${config.tools.path.build}/**/*.css`);

            cssCopyFileEntry = util.filterCopyFiles(config.build.copy.files, 'css');

            excludedCSSFilePaths = util.excludeFilePaths(cssEntry, cssCopyFileEntry);

            clean.css = excludedCSSFilePaths;
        }

        return clean;

    }();
};